---
- name: Create catalog and data directory
  file: path={{item}} owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=770 state=directory
  with_items:
    - "{{vertica_catalog_dir}}"
    - "{{vertica_data_dir}}"
  notify:
    - monasca_vertica_config_change

- name: Create vertica_config_dir, share, and log directories
  file: path={{item}} owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=775 state=directory
  with_items:
    - "{{vertica_config_dir}}"
    - /opt/vertica/config/share
    - /opt/vertica/log
  notify:
    - monasca_vertica_config_change

- name: Add links for init.d scripts
  file: src={{ item.src }} dest={{ item.dest}} state=link
  with_items:
    - { dest: '/etc/init.d/vertica_agent', src: '/opt/vertica/sbin/vertica_agent' }
    - { dest: '/etc/init.d/verticad', src: '/opt/vertica/sbin/verticad' }
  notify:
    - monasca_vertica_config_change

- name: Create file for EULA acceptance
  copy: src=d5415f948449e9d4c421b568f2411140.dat dest={{vertica_config_dir}}/d5415f948449e9d4c421b568f2411140.dat owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=775
  notify:
    - monasca_vertica_config_change

- name: Check if database exists
  command: /opt/vertica/bin/admintools -t list_db -d {{ vertica_database_name }}
  sudo_user: dbadmin
  ignore_errors: yes
  register: place_key

- name: Place community license key
  copy: src=community_license.key dest={{vertica_config_dir}}/share/license.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=664
  when: vertica_license is not defined and place_key|failed
  notify:
    - monasca_vertica_config_change

- name: Place license key
  copy: content="{{vertica_license}}" dest={{vertica_config_dir}}/share/license.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=664
  when: vertica_license is defined and place_key|failed
  notify:
    - monasca_vertica_config_change

# reads in the agent ssh keys from the first host as it will the use the same keys throughout the cluster
- name: Set agent keys from the first host
  set_fact: vertica_agent_key="{{hostvars[vertica_group[0]].vertica_agent_key}}"  vertica_agent_cert="{{hostvars[vertica_group[0]].vertica_agent_cert}}" vertica_agent_pem="{{hostvars[vertica_group[0]].vertica_agent_pem}}"
  when: vertica_group is defined and  hostvars[vertica_group[0]].vertica_agent_key is defined
  notify:
    - monasca_vertica_config_change

- name: Check status of agent ssl file
  stat: path={{vertica_config_dir}}/share/agent.key
  register: status
  when: vertica_agent_key is not defined
  notify:
    - monasca_vertica_config_change

# generate keys on first host if not already generated
- name: Generate agent ssl key
  shell: chdir={{vertica_config_dir}}/share {{ item }}
  with_items:
    - openssl genrsa 1024 > agent.key
    - openssl req -new -x509 -nodes -sha1 -days 36500  -key agent.key -subj '/C=US/ST=Massachusetts/L=Billerica/CN=www.vertica.com' > agent.cert
    - cat agent.cert agent.key > agent.pem
  when: status is defined and not status.stat.exists
  notify:
    - monasca_vertica_config_change

- name: Read in agent key
  slurp: src={{vertica_config_dir}}/share/agent.key
  register: agent_key_info
  when: vertica_agent_key is not defined
  notify:
    - monasca_vertica_config_change

- name: Read in agent cert
  slurp: src={{vertica_config_dir}}/share/agent.cert
  register: agent_cert_info
  when: vertica_agent_cert is not defined
  notify:
    - monasca_vertica_config_change

- name: Read in agent pem
  slurp: src={{vertica_config_dir}}/share/agent.pem
  register: agent_pem_info
  when: vertica_agent_pem is not defined
  notify:
    - monasca_vertica_config_change

# sets the agent keys on the first host
- name: Set agent ssl variables
  set_fact: vertica_agent_key="{{agent_key_info.content | b64decode}}" vertica_agent_cert="{{agent_cert_info.content | b64decode}}" vertica_agent_pem="{{agent_pem_info.content | b64decode}}"
  when: vertica_agent_key is not defined
  notify:
    - monasca_vertica_config_change

- name: Create agent key
  copy: dest={{vertica_config_dir}}/share/agent.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=400 content="{{vertica_agent_key}}"
  notify:
    - monasca_vertica_config_change

- name: Create agent cert
  copy: dest={{vertica_config_dir}}/share/agent.cert owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=400 content="{{vertica_agent_cert}}"
  notify:
    - monasca_vertica_config_change

- name: Create agent pem
  copy: dest={{vertica_config_dir}}/share/agent.pem owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=400 content="{{vertica_agent_pem}}"
  notify:
    - monasca_vertica_config_change

- name: Using insecure default database ssl key
  copy: src=default_server.key dest=/var/vertica/server.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=400 force=no
  when: vertica_server_key is not defined
  notify:
    - monasca_vertica_config_change

- name: Using insecure default database ssl crt
  copy: src=default_server.crt dest={{vertica_catalog_dir}}/../server.crt owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=444 force=no
  when: vertica_server_crt is not defined
  notify:
    - monasca_vertica_config_change

- name: Create server key from variable
  copy: dest={{vertica_catalog_dir}}/../server.key owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=400 content="{{vertica_server_key}}" force=no
  when: vertica_server_key is defined
  notify:
    - monasca_vertica_config_change

- name: Create server crt from variable
  copy: dest={{vertica_catalog_dir}}/../server.crt owner="{{vertica_dbadmin_user}}" group="{{vertica_dbadmin_group}}" mode=444 content="{{vertica_server_crt}}" force=no
  when: vertica_server_crt is defined
  notify:
    - monasca_vertica_config_change
